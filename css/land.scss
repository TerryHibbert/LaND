/* LaND - A fluid responsive layout framework by Terry Hibbert.
 *
 * TIPS:  Edit the SCSS and not the CSS.
 *        Add non-layout styles to a different CSS file loaded after LaND.
 *
 * Usage 'col La-N-D' where:
 *  'La' is replaced by the shorthand of the layout:
 *      a   :   any
 *      d   :   desktop
 *      t   :   tablet
 *      m   :   mobile
 *      ml  :   mobile landscape
 *      mp  :   mobile portrait
 *
 *      s   :   screen
 *      p   :   print
 *
 *  Then '-N-D' to represent the fraction: N/D
 *  'N' is the numerator (top of the fraction)
 *  'D' is the denominator (bottom of the fraction)
 *  e.g.  'col a-1-2 mp-1-1' will be a half column that changes to full width on mobile portrait
 */

@import "land/_targeted.scss";

$defaultContainerMax: 960px;

//                |         |         |         |         |
$layouts:         d         t         m         m         m;
$subLayouts:      d         t         m         ml        mp;
$max:             99999px   1024px    960px     960px     479px;
$min:             1024px    960px     0px       479px     0px;
$containerMax:    940px     940px     100%      100%      100%;

$largestDenominator: 8;

$padSizes: 0 10 20 30 40 50;
$padColDefaultSize: 3; // Start at one, no zero

$borderSizes: 0 1 2 3 4 5;

$transitionDuration: '0.5s';

$fixedSizes: 100 200 300 400;


/* General
================================================== */

@mixin borderBoxSizing() {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  *behavior: url(/css/boxsizing.htc);
}

* {
  @include borderBoxSizing();
}

img {
  border: 0;
}

ul.plain {
  list-style: none;
}

.debug-only { display: none; }
.debug .debug-only { display: block; }

[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
  display: none;
}

@mixin animate($duration, $properties) {
  transition-property: #{$properties};
  -webkit-transition-property: #{$properties};
  transition-duration: #{$transitionDuration};
  -webkit-transition-duration: #{$transitionDuration};
}

/* Columns
================================================== */

.col {
  float: left;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: relative;
  width: 100%;
  border: 0 solid #999;

  .right { float: right; }
  .overflow-visible { overflow: visible; }

  @include animate($transitionDuration, 'padding, border');
}

.col img {
  max-width: 100%;
}

/* Column debug */
.debug {
  .debuggable {
    .col {
      background: -moz-linear-gradient(-45deg, rgba(255,127,127,0.5) 0%, rgba(131,255,127,0.5) 100%);
      background: -webkit-linear-gradient(-45deg, rgba(255,127,127,0.5) 0%, rgba(131,255,127,0.5) 100%);
      background: -ms-linear-gradient(-45deg, rgba(255,127,127,0.5) 0%, rgba(131,255,127,0.5) 100%); /* IE10+ */
      background: linear-gradient(135deg, rgba(255,127,127,0.5) 0%, rgba(131,255,127,0.5) 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#FF7F7F', endColorstr='#83FF7F', GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
    }

    .col.one,
    .col.full,
    .col.fullWidth {
      background-color: #FF00FF;
    }
  }
}


/* #Default Layout
================================================== */

$layoutCount: length($layouts);

.container {
  overflow: hidden;
  width: $defaultContainerMax;
  clear: both;
}
.container.center {
  margin: 0 auto;
}

.container.animate {
  @include animate($transitionDuration, 'all');
}

/* Less than ie9 is fixed. Upgrade your browser please... */
.lt-ie8 .container {
  width: $defaultContainerMax !important;
}

/* Col sizes for any layout - to override with more specific layouts */
@include colSizes($la: "a");
@include targetedProperties($la: "a");

@media screen {
  land-s {cue:none}

  .not-s,
  .p {
    display: none;
  }
}

@media print {
  land-p {cue:none}

  .not-p,
  .s {
    display: none;
  }
}

/* BUILD LAYOUTS */
@for $i from 1 through $layoutCount {

  $la: nth($layouts,$i);
  $subLa: nth($subLayouts,$i);

  $nots: '';
  @for $j from 1 through $layoutCount {
    $nla: nth($subLayouts, $j);
    @if $nla != $la and $nla != $subLa {
      $nots: $nots + '.#{nth($subLayouts, $j)},';
      $nots: $nots + '.#{nth($subLayouts, $j)}-block,';
      $nots: $nots + '.#{nth($subLayouts, $j)}-inline';
      @if $j < $layoutCount {
        $nots: $nots + ',';
      }
    }
  }

  @media (min-width: #{nth($min,$i)}) and (max-width: #{nth($max,$i)}) {
    land-#{$subLa} {cue:none}

    .#{$la}, .#{$subLa} { display: block; }
    .#{$la}, .#{$subLa}-block { display: block; }
    .#{$la}, .#{$subLa}-inline { display: block; }

    #{$nots}, .not-#{$subLa} { display: none; }
    #{$nots}, .not-#{$subLa} { display: none; }

    .container {
      width: #{nth($containerMax,$i)};
    }

    @include colSizes($la: $subLa);
    @include targetedProperties($la: $subLa);
  }
}